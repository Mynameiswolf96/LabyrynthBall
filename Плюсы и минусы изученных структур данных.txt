Расписать в текстовом документе плюсы и минусы изученных структур данных и расписать примеры в которых нужно будет использовать тот или иной контейнер.

1)List<T>:
Время + вставки, добавления элемента                                             
O(1) в конец и без перераспределения памяти ++
O(n) в начало (то есть все элементы сдвигаются) --
Время - удаления элемента
O(1) если последний удаляем элемент ++
O(n) если 1-ый удаляем элемент --
Время получения, поиска элемента
O(1) взять значение по индекс ++
O(n) поиск элемента по значению --
2)LinkedList<T>
Время + вставки, добавления элемента 
O(1) не учитываем поиск элемента ++
Время - удаления элемента
O(1) не учитываем поиск элемента ++
Время получения, поиска элемента
O(n) поиск элемента по значению --
3)Dictionary<TKey, TValue>
Хеш-таблица используется для большого кол-во данных (например для 5 элементов не стоит её использовать)
Время + вставки, добавления элемента
O(1) ++
O(n) в случае коллизии
Время - удаления элементаO(1) ++
O(1) не учитываем поиск элемента
Время получения, поиска элемента
взять значение по ключу
O(1)++
O(n) в случае коллизии
4)SortedDictionary<TKey, TValue>
поиск по двоичному дереву
Время + вставки, добавления элемента
O( log2(n) )
Время - удаления элемента
O( log2(n) )
Время получения, поиска элемента
O( log2(n) )
Когда у нас единичная зависимость ++
Когда у нас линейная зависимость --
Когда логарифмическая зависимость быстро может обработать огромное количество данных за маленькое кол-во действий.